// Generated by CoffeeScript 1.7.1
(function() {
  var Coffee, async, coffee, join,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  join = require("path").join;

  coffee = require('coffee-script');

  async = require('async');

  Coffee = (function() {
    function Coffee(options) {
      var Middleware, middleware;
      Middleware = (function() {
        function Middleware(options) {
          var method, _i, _len, _ref;
          this.options = options;
          this.convert = __bind(this.convert, this);
          this.output = __bind(this.output, this);
          this.filter = __bind(this.filter, this);
          this.regex = coffee.FILE_EXTENSIONS.join("$|");
          this.regex = new RegExp(this.regex.replace(/\./g, "\\.") + "$", "g");
          if (typeof this.options !== "object") {
            this.options = {};
          }
          _ref = ["filter", "output"];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            method = _ref[_i];
            if (this.options[method] && typeof this.options[method] !== "function") {
              delete this.options[method];
              console.error("invalid option." + method + " method");
            }
          }
        }

        Middleware.prototype.filter = function(filepath) {
          return this.regex.test(filepath);
        };

        Middleware.prototype.output = function(filepath) {
          return filepath.replace(this.regex, '.js');
        };

        Middleware.prototype.convert = function(options, files, source, done) {
          var contents, data, message;
          data = files[source];
          if (!data || !data.contents) {
            message = 'data does not exist';
            return done(new Error(message));
          }
          try {
            contents = coffee.compile(data.contents.toString(), options);
            files[(options.output || this.output)(source)] = {
              contents: new Buffer(contents)
            };
            return done(null);
          } catch (_error) {
            return done(err);
          }
        };

        Middleware.prototype.plugin = function(files, metalsmith, done) {
          var err, paths;
          try {
            paths = Object.keys(files).filter(this.options.filter || this.filter);
          } catch (_error) {
            err = _error;
            return done(err);
          }
          return async.each(paths, this.convert.bind(null, this.options, files), (function(_this) {
            return function(err) {
              if (err) {
                return done(err);
              }
              if (!_this.options.preserveSources) {
                paths.map(function(file) {
                  return delete files[file];
                });
              }
              return done(null);
            };
          })(this));
        };

        return Middleware;

      })();
      middleware = new Middleware(options);
      return middleware.plugin.bind(middleware);
    }

    return Coffee;

  })();

  module.exports = Coffee;

}).call(this);
